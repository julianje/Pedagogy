c("",names(res))
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
inputs<-c("a","b","c")
inputs<-c("a","b","c","")
inputs
inputs[which(inputs!="")]
length(inputs)
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
test<-c("a","b","a")
length(a)
length(test)
length(unique(test))
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
citation("ppcor")
package(irr)
library(irr)
install.packages("irr")
?irr
library(irr)
?irr
??irr
a
data<-data.frame(x=c(1,2,3,4),y=c(4,3,2,1),z=c(6,3,4,5))
data
agree(irr)
agree(data)
kappa2(data)
kappa2(data[,c("x","y")])
res$Kappa
res2<-res$Kappa
res2
res<-kappa2(data[,c("x","y")])
res
res
data$x
data
data[,c("x","y")]
shiny::runApp('Documents/Projects/Models/Kiwi/Bootstrapper')
shiny::runApp('Documents/Projects/Models/Kiwi/Bootstrapper')
shiny::runApp('Documents/Projects/Models/Kiwi/Bootstrapper')
shiny::runApp('Documents/Projects/Models/Kiwi/Bootstrapper')
shiny::runApp('Documents/Projects/Models/Kiwi/Bootstrapper')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
res
print(res)
d
data
kappa2(res[,c("x","y")])
kappa2(data[,c("x","y")])
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
res
names(res)
res$method
res$subject
print(res)
res
print(res)
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
data
input1<-"x"
input2<-"y"
inputs<-c(input1,input2)
inputs
data[,inputs]
inputs[0]
inputs
inputs[1]
inputs[2]
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
data
ggvis(data)
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
data
inputs
d=data
d
d<-d %>% gather(Variable,Value) %>%
filter(Variable %in% inputs)
d
spread(d,Variable,Value)
d
data
data
d<-data
d
d<-d[,inputs]
d
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
d
add_rownames(d)
add_rownames(d) %>% gather(Variable,Value,x,y)
add_rownames(d) %>% gather(Variable,Value,x,y) %>% ggplot(aes(x=Variable,y=Value,group=rowname))+geom_point()+geom_line()
library(ggplot2)
add_rownames(d) %>% gather(Variable,Value,x,y) %>% ggplot(aes(x=Variable,y=Value,group=rowname))+geom_point()+geom_line()
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
?theme
?theme_bw
d
d %>% add_rownames %>% gather(Variable,Value,x,y) %>%
ggplot(aes(x=Variable,y=Value,group=rowname))+geom_point(size=3,alpha=3/4)+geom_line()+
theme_linedraw()+
scale_x_discrete("Coders",labels=c(input$var1,input$var2))+
scale_y_continuous("Judgments")
input<-NULL
input$var1<-"a"
input$var2<-"b"
d %>% add_rownames %>% gather(Variable,Value,x,y) %>%
ggplot(aes(x=Variable,y=Value,group=rowname))+geom_point(size=3,alpha=3/4)+geom_line()+
theme_linedraw()+
scale_x_discrete("Coders",labels=c(input$var1,input$var2))+
scale_y_continuous("Judgments")
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
data
d
agree(d)
anxiety
bhapkar(d)
d
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
rater.bias(d)
stuart.maxwell.mh(d)
stuart.maxwell.mh(as.matrix(d))
d
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
d
names(d)
reverse(names(d))
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/Coders')
shiny::runApp('Documents/Projects/Models/Kiwi/PCor')
sapply(1:16,function(x){return(binom.test(x,16,alternative=c("greater"))$p.value)})
sapply(1:17,function(x){return(binom.test(x,17,alternative=c("greater"))$p.value)})
pvals1<-sapply(1:16,function(x){return(binom.test(x,16)$p.value)})
pvals2<-sapply(1:16,function(x){return(binom.test(x,17)$p.value)})
data=data.frame(success=c(rep(1:16,2)),pvals=c(pvals1,pvals2))
library(ggplot2)
ggplot(data,aes(x=success,y=pvals))+geom_point()
data=data.frame(success=c(rep(1:16,2)),pvals=c(pvals1,pvals2),condition=c(rep("a",16),rep("b",16)))
data
data<-mutate(data,sig=pvals<0.05)
library(tidyr)
data<-mutate(data,sig=pvals<0.05)
library(dplyr)
data<-mutate(data,sig=pvals<0.05)
head(data)
ggplot(data,aes(x=success,y=pvals,group=condition,color=sig))+geom_point()+facet_wrap(~condition)
library(ggplot2)
data = data.frame(
answer<-c(rep(1,14),(0,2),rep(1,9),rep(0,7)),
data = data.frame(
answer<-c(rep(1,14),rep(0,2),rep(1,9),rep(0,7)),
experiment<-c(rep("Test",16),rep("Control"),16))
answer<-c(rep(1,14),rep(0,2),rep(1,9),rep(0,7))
answer
length(answer)
data = data.frame(
answer<-c(rep(1,14),rep(0,2),rep(1,9),rep(0,7)),
experiment<-c(rep("Test",16),rep("Control",16)))
data
head(data)
data = data.frame(
answer=c(rep(1,14),rep(0,2),rep(1,9),rep(0,7)),
experiment=c(rep("Test",16),rep("Control",16)))
data
head(Data)
head(data)
data %>% dplyr::group_by(experiment) %>% dplyr::summarise(Total=n(),Knowledgeable=sum(answer)*100/Total,Ignorant=100-Knowledgeable) %>%
gather(Response,Percentage,Knowledgeable,Ignorant) %>% ggplot(aes(x=experiment,y=Percentage,fill=Response))+geom_bar(stat="identity")
library(dplyr)
library(tidyr)
data %>% dplyr::group_by(experiment) %>% dplyr::summarise(Total=n(),Knowledgeable=sum(answer)*100/Total,Ignorant=100-Knowledgeable) %>%
gather(Response,Percentage,Knowledgeable,Ignorant) %>% ggplot(aes(x=experiment,y=Percentage,fill=Response))+geom_bar(stat="identity")
data = data.frame(
answer=c(rep(1,14),rep(0,2),rep(1,9),rep(0,7)),
experiment=c(rep("Test",16),rep("Control",16)))
data
data
library(boot)
data
getcor<-function(x,id){
return(sum(x[,id]$answer/length(x[,id]))
}
length(data)
getcor<-function(x,id){
return(sum(x[,id]$answer/length(x[,id]$answer))
}
getcor<-function(x,id){
return(sum(x[,id]$answer)/length(x[,id]$answer))
}
library(dplyr)
dplyr::ddply(data,c("experiment"),function(x){boot.ci(boot(x,statistic=getcor,R=1000),type="basic")$basic})
library(ddply)
dplyr
library(dplyr)
dplyr
dplyr::ddply(data,c("experiment"),function(x){boot.ci(boot(x,statistic=getcor,R=1000),type="basic")$basic})
library(plyr)
plyr::ddply(data,c("experiment"),function(x){boot.ci(boot(x,statistic=getcor,R=1000),type="basic")$basic})
data
data
data %>% filter(experiment=="Test")
data %>% filter(experiment=="Test") %>% boot(getcor,R=1000)
boot(data,getcor,R=10000)
getcor<-function(x,id){
return(sum(x[id,]$answer)/length(x[id,]$answer))
}
plyr::ddply(data,c("experiment"),function(x){boot.ci(boot(x,statistic=getcor,R=1000),type="basic")$basic})
data %>% filter(experiment=="Test") %>% boot(getcor,R=1000)
res<-data %>% filter(experiment=="Test") %>% boot(getcor,R=1000)
boot.ci(res)
boot.ci(res,type="basic")
boot.ci(res,type="basic")$basic
boot(data,getcor,R=10000)
boot.ci(boot(data,getcor,R=10000),type="basic")
boot.ci(boot(data,getcor,R=10000),type="basic")$basic
plyr::ddply(data,c("experiment"),function(x){return(boot.ci(boot(x,statistic=getcor,R=1000),type="basic")$basic)})
res<-data %>% filter(experiment=="Test") %>% boot(getcor,R=10000)
boot.ci(res)
res<-data %>% filter(experiment=="Control") %>% boot(getcor,R=10000)
boot.ci(res) #0.85-1.00
data
data %>% dplyr::group_by(experiment) %>% dplyr::summarise(Total=n(),Knowledgeable=sum(answer)*100/Total,Ignorant=100-Knowledgeable)
data<-data %>% dplyr::group_by(experiment) %>% dplyr::summarise(Total=n(),Knowledgeable=sum(answer)*100/Total,Ignorant=100-Knowledgeable)
data$Lower=c(0.3125,0.85)
data$Upper=c(0.8125,1.00)
data
data %>% dplyr:gather(Choice,Percentage,Knowledgeable,Ignorant)
data %>% dplyr::gather(Choice,Percentage,Knowledgeable,Ignorant)
data %>% tidyr::gather(Choice,Percentage,Knowledgeable,Ignorant)
data %>% tidyr::gather(Choice,Percentage,Knowledgeable,Ignorant) %>%
ggplot(aes(x=experiment,y=Percentage,fill=Choice))+geom_bar(stat="identity")+geom_errorbar(aes(ymin=Lower,ymax=Upper))
data %>% tidyr::gather(Choice,Percentage,Knowledgeable,Ignorant) %>%
ggplot(aes(x=experiment,y=Percentage,fill=Choice))+geom_bar(stat="identity")+geom_errorbar(aes(ymin=Lower*100,ymax=Upper*100))
data %>% tidyr::gather(Choice,Percentage,Knowledgeable,Ignorant) %>%
ggplot(aes(x=experiment,y=Percentage,fill=Choice))+geom_bar(stat="identity")+geom_errorbar(aes(ymin=Lower*100,ymax=Upper*100),width=0.2)
data
14/16
data = data.frame(
answer=c(rep(1,14),rep(0,2),rep(1,9),rep(0,7)),
experiment=c(rep("Test",16),rep("Control",16)))
data
data %>% filter(experiment=="Test")
data %>% filter(experiment=="Test") %>% select(answer) %>% sum
14/16
res<-data %>% filter(experiment=="Test") %>% boot(getcor,R=10000)
boot.ci(res) #0.85-1.00
data<-data %>% dplyr::group_by(experiment) %>% dplyr::summarise(Total=n(),Knowledgeable=sum(answer)*100/Total,Ignorant=100-Knowledgeable)
data$Lower=c(0.3125,0.75)
data$Upper=c(0.8125,1.00)
data %>% tidyr::gather(Choice,Percentage,Knowledgeable,Ignorant) %>%
ggplot(aes(x=experiment,y=Percentage,fill=Choice))+geom_bar(stat="identity")+geom_errorbar(aes(ymin=Lower*100,ymax=Upper*100),width=0.2)
ggsave("Costs1.pdf")
shiny::runApp('Documents/Projects/Models/Kiwi/Bootstrapper')
shiny::runApp('Documents/Projects/Models/Kiwi/Bootstrapper')
shiny::runApp('Documents/Projects/Models/Kiwi/Bootstrapper')
library(googleVis)
library(shiny)
help()
install.packages("DT")
install.packages("plyr")
install.packages(c("plyr","dplyr","tidyr","ggplot2","googleVis","shiny","magrittr"))
library(dplyr)
library(magrittr)
library(googleVis)
library(magrittr)
library(magrittr)
rm (list = ls(all = TRUE)) # Clean everything
options(warn=-1) # Boot.ci() keeps waning about needing variances for t-intervals. But we don't use those.
# Load packages
library(tidyr)
library(dplyr)
library(plyr)
library(ggplot2)
library(boot)
library(magrittr)
library(nlme)
# Set working directory
setwd("~/Documents/Projects/SamplingAndEfficiency/Big World/Experiment1/Experiment1Results/")
# Part 0: Get demographics ------------------
# Load ages
demographics <- read.csv("../Experiment1Results/Demographics.csv") %>% tbl_df %>%
select(Answer.Age,Answer.surveycode) %>%
dplyr::rename(Age=Answer.Age,SurveyCode=Answer.surveycode) %>%
tidyr::separate(SurveyCode,into=c("Trash","SubjectId"),sep=2) %>%
select(-Trash)
summary(demographics$Age)
rm(demographics)
# Part 1: Load data -----------------------------------------------------
# Load data and remove columms you don't need
models<-read.csv("../Model_Predictions/final_data.csv") %>% select(-WorldName,-NPickUp,-CanHold1AtATime) %>% tbl_df
# TrueValue column is stored as strings. Convert it to factors
models$TrueValue<-factor(models$TrueValue)
models<-select(models,-(p_val:Cost),-MAP)
levels(models$TrueValue)<-c("N","P") # Change the factor's levels
# Z-score models
models <- plyr::ddply(models,c("Model"),function(x){
return(data.frame(Quantity = x$Quantity,
Location = x$Location,
TrueValue = x$TrueValue,
WorldType = x$WorldType,
InferredVal = scale(x$InferredVal)[,1],
SD = scale(x$SD)[,1],
VariedCollection = x$VariedCollection))
})
# Load experiment results
human<-read.csv("SAE.csv") %>% tbl_df
# Get preference judgments for object 1 (fix scale depending on stimuli type the participant saw)
human$Preference=(1-human$Preference)*(1-human$StimType)+(human$Preference)*(human$StimType)
# Z-score each participant's answers and remove SubjectId
human<-plyr::ddply(human,c("SubjectId","ExpCondition"),function(x){
return(data.frame(Preference=scale(x$Preference)[,1],
Confidence=scale(x$Confidence)[,1],
TrialName=x$TrialName))
}) %>% tbl_df
# TrialName column has the image file. Extract the stimuli condition from the string
human<-separate(human,TrialName,c("Trash","TrialName"),sep=4) %>% # split "img-" to a different column
select(-Trash) %>% # And delete that column
separate(TrialName,c("Quantity","Location"),sep=1) %>% # Take the first character and save into Quantity column
separate(Location,c("Location","Rest"),sep=1) %>% # Take second character and save into location column
separate(Rest,c("TrueValue","Trash"),sep=1) %>% select(-Trash) # Save last character and delete ".gif"
# Convert all characters into factors and add correct levels
human$Quantity<-factor(human$Quantity)
levels(human$Quantity)<-c("Even","Plentiful","Scarce")
human$Location<-factor(human$Location)
levels(human$Location)<-c("Closer","Farther","Random")
# Rename columns so we can merge them with model predictions
human<-dplyr::rename(human,HumanPref=Preference, HumanConf=Confidence, WorldType=ExpCondition)
RawData <- dplyr::full_join(human,models) %>% tbl_df
getCI<-function(inputdata){
samples<-boot(inputdata,function(x,id){return(mean(x[id,]$HumanPref))},10000)
ci<-boot.ci(samples,type="basic")
return(c(ci$basic[4],ci$basic[5]))
}
set.seed(2837495)
CIs<-plyr::ddply(human,c("Quantity","Location","TrueValue","WorldType"),getCI)
CIs %<>% dplyr::rename(Lower=V1,Upper=V2)
# Now get the average human judgment
human<-human %>% dplyr::group_by(Quantity,Location,TrueValue,WorldType) %>%
dplyr::summarise(HumanPref=mean(HumanPref),HumanConf=mean(HumanConf))
# Invert confidence judgments so 0 means extremely confident and 1 means not confident at all.
human$HumanConf=human$HumanConf*(-1)
# Create new data frame with human and model results
AllData<-dplyr::full_join(human,models,by=c("Quantity","Location","TrueValue","WorldType")) %>% tbl_df
rm(human,models)
AllData %>% dplyr::group_by(Model) %>% dplyr::summarise(cor=cor(HumanPref,InferredVal))
AllData
spread(AllData,Model,InferredVal)
AllData %>% select(-SD) %>% spread(Model,InferredVal)
tempdat<-AllData %>% select(-SD) %>% spread(Model,InferredVal)
lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat)
summary(lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat))
plot(lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat))
lm.predict
?predict
predict(lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat))
data.frame(predict(lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat)))
lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat) %>% predict
lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat) %>% predict %>%
data.frame
lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat) %>% predict %>%
data.frame %>% rename(Values=.)
lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat) %>% predict %>%
data.frame %>% rename(Values=".")
lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat) %>% predict %>%
data.frame %>% rename(Values=2)
lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat) %>% predict %>%
data.frame %>% rename(Values=1)
lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat) %>% predict %>%
data.frame %>% rename()
lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat) %>% predict %>%
data.frame
res<-lm(HumanPref ~ PropSensitiveSampling*PropInensitiveSampling,data=tempdat) %>% predict %>%
data.frame
names(res)
names(res)="prediction"
cor(res$prediction,AllData$HumanPref)
AllData$HumanPref
cor(res$prediction,tempdat$HumanPref)
plot(res$prediction,tempdat$HumanPref)
res<-lm(HumanPref ~ PropSensitiveSampling+PropInensitiveSampling,data=tempdat) %>% predict %>%
data.frame
names(res)="prediction"
cor(res$prediction,tempdat$HumanPref)
plot(res$prediction,tempdat$HumanPref)
---
library(dplyr, quietly=T, warn.conflicts=F)
library(ggplot2, quietly=T, warn.conflicts=F)
library(ggvis, quietly=T, warn.conflicts=F)
library(tidyr, quietly=T, warn.conflicts=F)
library(knitr, quietly=T, warn.conflicts=F)
library(boot, quietly=T, warn.conflicts=F)
setwd("~/Documents/Projects/Models/Pedagogy/Pedagogy/")
data <- read.csv("ModelPredictions_WithEither.csv") %>% tbl_df %>% mutate(Model=paste(LearnC,LearnR,TeachC,TeachR,DiscoverC,DiscoverR))
levels(data$Condition)=c("1: Equal\nCosts","4: Inverted\nRewards","3: Matched\nRewards","2: Unequal\nCosts")
data$Condition<-as.character(data$Condition)
data$ExploreProb<-factor(data$ExploreProb)
levels(data$ExploreProb)=c("Exploration\nuncertainty","Exploration\ncertainty")
levels(data$TeacherReward)=c("Constant\nteacher reward","Variable\nteacher reward")
levels(data$Decision)=c("2: Either","3: Red toy","1: Yellow toy")
data$Decision<-as.character(data$Decision)
Summarydata<-data %>%
dplyr::group_by(ExploreProb,TeacherReward,Condition,Decision,Model) %>%
dplyr::summarise(proportion=n())
Summarydata
Summarydata %>% filter(Model %in% ModelSpace,TeacherReward=="Constant\nteacher")
ModelSpace=c("1 1 0 0 1 1","1 0 0 0 1 0","0 1 0 0 0 1","1 1 0 0 0 0","0 0 0 0 1 1")
Summarydata %>% filter(Model %in% ModelSpace,TeacherReward=="Constant\nteacher")
ModelSpace=c("1 1 0 0 1 1","1 0 0 0 1 0","0 1 0 0 0 1","1 1 0 0 0 0","0 0 0 0 1 1")
Summarydata %>% filter(Model %in% ModelSpace,TeacherReward=="Constant\nteacher")
SummaryData
Summarydata
Summarydata %>% filter(Model %in% ModelSpace)
Summarydata %>% filter(Model %in% ModelSpace) %>% ggplot(aes(x=Condition,y=proportion,color=Decision))+geom_point()
Summarydata %>%
Summarydata %>% filter(Model %in% ModelSpace) %>% ggplot(aes(x=Condition,y=proportion,color=Decision))+geom_point()+facet_wrap(Model~ExploreProb)
Summarydata %>%
Summarydata %>% filter(Model %in% ModelSpace) %>% ggplot(aes(x=Condition,y=proportion,color=Decision))+geom_point()+facet_wrap(Model~ExploreProb)
Summarydata
Summarydata %>% filter(Model %in% ModelSpace)
Summarydata %>% filter(Model %in% ModelSpace) %>% ggplot(aes(x=Condition,y=proportion,color=Decision))+geom_point()+facet_wrap(Model~ExploreProb)
Summarydata %>% filter(Model %in% ModelSpace) %>% ggplot(aes(x=Condition,y=proportion,color=Decision))+geom_point()+facet_grid(Model~ExploreProb)+theme_bw()
Summarydata %>%
()
Summarydata %>% filter(Model %in% ModelSpace) %>% ggplot(aes(x=Condition,y=proportion,color=Decision,group=Decision))+geom_point()+geom_line()+facet_grid(Model~ExploreProb)+theme_bw()
Summarydata %>%
()
Summarydata
Tempdat<-Summarydata %>% filter(Model %in% ModelSpace)
Tempdat
Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="Equal\nCosts")
filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts")
Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts")
Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts",ExploreProb=="Exploration\nuncertainty") %>% select(proportion) %>% sum
Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts",ExploreProb=="Exploration\nuncertainty")
Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts",ExploreProb=="Exploration\nuncertainty") %>% select(proportion)
-Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts",ExploreProb=="Exploration\nuncertainty") %>% ungroup()
Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts",ExploreProb=="Exploration\nuncertainty") %>% ungroup()
Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts",ExploreProb=="Exploration\nuncertainty") %>% ungroup() %>% select(proportion)
Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts",ExploreProb=="Exploration\nuncertainty") %>% ungroup() %>% select(proportion) %>% sum
NormalizingConstant<-Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts",ExploreProb=="Exploration\nuncertainty") %>% ungroup() %>% select(proportion) %>% sum
Tempdat$proportion=Tempdat/NormalizingConstant
Tempdat$proportion=Tempdat$proportion/NormalizingConstant
Tempdat
Tempdat <- filter(Tempdat,Decision!="1: Yellow toy")
Tempdat
Tempdat %>% filter(Decision=="2: Either")
Tempdat %>% filter(Decision=="2: Either") %>% mutate(Addon=proportion/2)
ModelSpace=c("1 1 0 0 1 1","1 0 0 0 1 0","0 1 0 0 0 1","1 1 0 0 0 0","0 0 0 0 1 1")
Tempdat<-Summarydata %>% filter(Model %in% ModelSpace)
NormalizingConstant<-Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts",ExploreProb=="Exploration\nuncertainty") %>% ungroup() %>% select(proportion) %>% sum
Tempdat$proportion=Tempdat$proportion*100/NormalizingConstant
# Get half of the splits!
Splits <- Tempdat %>% filter(Decision=="2: Either") %>% mutate(Addon=proportion/2) %>%
select(-Decision,-proportion)
Tempdat <- filter(Tempdat,Decision=="3: Red toy")
Tempdat2 <- full_join(Tempdat,Splits)
Tempdat2
ModelSpace=c("1 1 0 0 1 1","1 0 0 0 1 0","0 1 0 0 0 1","1 1 0 0 0 0","0 0 0 0 1 1")
Tempdat<-Summarydata %>% filter(Model %in% ModelSpace)
NormalizingConstant<-Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts",ExploreProb=="Exploration\nuncertainty") %>% ungroup() %>% select(proportion) %>% sum
Tempdat$proportion=Tempdat$proportion*100/NormalizingConstant
data
ModelSpace=c("1 1 0 0 1 1","1 0 0 0 1 0","0 1 0 0 0 1","1 1 0 0 0 0","0 0 0 0 1 1")
Tempdat<-Summarydata %>% filter(Model %in% ModelSpace)
NormalizingConstant<-Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts",ExploreProb=="Exploration\nuncertainty") %>% ungroup() %>% select(proportion) %>% sum
Tempdat$proportion=Tempdat$proportion*100/NormalizingConstant
Tempdat %>% filter(Model %in% ModelSpace) %>% ggplot(aes(x=Condition,y=proportion,color=Decision,group=Decision))+geom_point()+geom_line()+facet_grid(Model~ExploreProb)+theme_bw()
f
Tempdat %>% filter(Model %in% ModelSpace) %>% ggplot(aes(x=Condition,y=proportion,fill=Decision))+geom_bar(stat="identity")+facet_grid(Model~ExploreProb)+theme_bw()
Tempdat
Tempdat$Model
Tempdat$Model<-factor(Tempdat$Model)
levels(Tempdat$Model)
levels(Tempdat$Model)=c("Novel only","Rewards only","Costs only","Learned only","Full model")
Tempdat %>% filter(Model %in% ModelSpace) %>% ggplot(aes(x=Condition,y=proportion,fill=Decision))+geom_bar(stat="identity")+facet_grid(Model~ExploreProb)+theme_bw()+scale_fill_manual(values=c("#EBE549","#00B554","#C7363D"))
Tempdat %>% ggplot(aes(x=Condition,y=proportion,fill=Decision))+geom_bar(stat="identity")+facet_grid(Model~ExploreProb)+theme_bw()+scale_fill_manual(values=c("#EBE549","#00B554","#C7363D"))
Tempdat %>% ggplot(aes(x=Condition,y=proportion,fill=Decision))+geom_bar(stat="identity")+facet_grid(Model~ExploreProb)+theme_bw()+scale_fill_manual(values=c("#EBE549","#00B554","#C7363D"))+scale_y_continuous("Percentage\nof choices")
ModelSpace=c("1 1 0 0 1 1","1 0 0 0 1 0","0 1 0 0 0 1","1 1 0 0 0 0","0 0 0 0 1 1")
Tempdat<-Summarydata %>% filter(Model %in% ModelSpace)
NormalizingConstant<-Tempdat %>% filter(Model=="1 1 0 0 1 1",Condition=="1: Equal\nCosts",ExploreProb=="Exploration\nuncertainty") %>% ungroup() %>% select(proportion) %>% sum
Tempdat$proportion=Tempdat$proportion*100/NormalizingConstant
Tempdat$Model<-factor(Tempdat$Model)
levels(Tempdat$Model)=c("Novel\nonly","Rewards\nonly","Costs\nonly","Learned\nonly","Full\nmodel")
Tempdat %>% ggplot(aes(x=Condition,y=proportion,fill=Decision))+geom_bar(stat="identity")+facet_grid(Model~ExploreProb)+theme_bw()+scale_fill_manual(values=c("#EBE549","#00B554","#C7363D"))+scale_y_continuous("Percentage\nof choices")
ggsave("Modelpredictions.pdf")
